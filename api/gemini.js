// api/gemini.js

export default async function handler(req, res) {
Â  if (req.method !== 'POST') {
Â  Â  return res.status(405).json({ error: 'MÃ©todo nÃ£o permitido' });
Â  }

Â  const { contents, generationConfig } = req.body;

Â  // ðŸ’¡ CORREÃ‡ÃƒO 1: Use o nome da variÃ¡vel de ambiente que vocÃª configurou no Vercel.
Â  const GEMINI_API_KEY = process.env.API_KEY; 

Â  if (!GEMINI_API_KEY) {
Â  Â  return res.status(500).json({ error: 'Chave da API nÃ£o configurada no ambiente Vercel.' });
Â  }

Â  try {
Â  Â  // ðŸ’¡ CORREÃ‡ÃƒO 2: Altere a versÃ£o da API de v1beta para v1 (estÃ¡vel)
Â  Â  const API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=' + GEMINI_API_KEY;

Â  Â  const response = await fetch(
Â  Â  Â  API_URL,
Â  Â  Â  {
Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  'Content-Type': 'application/json'
Â  Â  Â  Â  },
Â  Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  Â  contents,
Â  Â  Â  Â  Â  generationConfig
Â  Â  Â  Â  })
Â  Â  Â  }
Â  Â  );

Â  Â  const data = await response.json();

Â  Â  if (!response.ok) {
Â  Â  Â  // Retorna a mensagem de erro detalhada do Gemini
Â  Â  Â  return res.status(response.status).json({ 
          error: data.error?.message || data.error || 'Erro desconhecido na API Gemini' 
      });
Â  Â  }

Â  Â  res.status(200).json(data);
Â  } catch (error) {
Â  Â  console.error('Erro ao chamar Gemini API:', error);
Â  Â  res.status(500).json({ error: 'Erro interno ao se comunicar com a API Gemini' });
Â  }
}
